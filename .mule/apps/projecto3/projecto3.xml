<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/current/mule-twitter.xsd">
    <db:generic-config name="Generic_Database_Configuration" url="jdbc:postgresql://localhost:5432/IS?user=postgres&amp;password=postgres" driverClassName="org.postgresql.Driver" doc:name="Generic Database Configuration"/>
    <smtp:gmail-connector name="Gmail" validateConnections="true" doc:name="Gmail"/>
    <mulexml:jaxb-context name="myJaxb" packageNames="generated" doc:name="JAXB Context"/>
    <mulexml:schema-validation-filter schemaLocations="Example.xsd" returnResult="true" name="Schema_Validation" doc:name="Schema Validation"/>
    <twitter:config name="Twitter" accessKey="${twitter.accessKey}" accessSecret="${twitter.accessSecret}" consumerKey="${twitter.consumerKey}" consumerSecret="${twitter.consumerSecret}" doc:name="Twitter"/>
    <flow name="readfile" doc:name="readfile">
        <file:inbound-endpoint path="C:\CNN" responseTimeout="10000" doc:name="File"/>
        <flow-ref name="addnews" doc:name="Flow Reference"/>

    </flow>
    <flow name="Digest" doc:name="Digest">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="10" timeUnit="MINUTES"/>
            <logger message="DIGEST" level="INFO" doc:name="Logger"/>
        </poll>
        <expression-component doc:name="Expression"><![CDATA[flowVars.regions = {"US", "AFRICA", "ASIA", "EUROPE", "LATINAMERICA", "MIDDLEEAST"};]]></expression-component>
        <foreach collection="flowVars.regions" doc:name="For Each Region">
            <enricher source="#[payload]" target="#[flowVars.news]" doc:name="Message Enricher">
                <db:select config-ref="Generic_Database_Configuration" doc:name="Get news">
                    <db:parameterized-query><![CDATA[SELECT * FROM news WHERE region = #[payload];]]></db:parameterized-query>
                </db:select>
            </enricher>
            <enricher source="#[payload]" target="#[flowVars.subs]" doc:name="Message Enricher">
                <db:select config-ref="Generic_Database_Configuration" doc:name="Get subs">
                    <db:parameterized-query><![CDATA[SELECT * FROM subscribers WHERE region = #[payload] AND digest = 1;]]></db:parameterized-query>
                </db:select>
            </enricher>
            <choice doc:name="Choice">
                <when expression="flowVars.subs.size() !=0">
                    <expression-component doc:name="Expression"><![CDATA[flowVars.emailBody = " ";]]></expression-component>
                    <foreach collection="flowVars.news" doc:name="For Each News ">
                        <expression-component doc:name="Expression"><![CDATA[flowVars.emailBody += counter+".\t";
flowVars.emailBody += payload.title;
flowVars.emailBody +="\n";
flowVars.emailBody += "\tRead At: "+payload.url+"\n\n";]]></expression-component>
                    </foreach>
                    <foreach collection="flowVars.subs" doc:name="For Each">
                        <logger message="#[payload['email']]" level="INFO" doc:name="Logger"/>
                        <expression-component doc:name="Expression"><![CDATA[flowVars.email = payload.email;]]></expression-component>
                        <set-payload value="#[flowVars.emailBody]" doc:name="Set Payload"/>
                        <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="systemsintegration14%40gmail.com" password="1234567892014" connector-ref="Gmail" to="#[flowVars.email]" from="systemsintegration14@gmail.com" subject="Your digest" responseTimeout="10000" doc:name="DIGEST"/>
                    </foreach>
                </when>
                <otherwise>
                    <logger message="N&#195;O H&#193; UTILIZADORES DIGEST PARA ESTA REGI&#195;O #[payload]" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <flow name="webclient" doc:name="webclient">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="webclient" doc:name="HTTP"/>
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <choice doc:name="Choice">
            <when expression="payload['action'] == &quot;Subscribe&quot;">
                <expression-component doc:name="Expression"><![CDATA[flowVars.email=payload.email;
flowVars.region=payload.region;
flowVars.soap=Integer.parseInt(payload.soap);
flowVars.digest = Integer.parseInt(payload.digest);]]></expression-component>
                <flow-ref name="subscribe" doc:name="Subscribe"/>
            </when>
            <when expression="payload['action'] == &quot;Unsubscribe&quot;">
                <expression-component doc:name="Expression"><![CDATA[flowVars.email=payload.email;]]></expression-component>
                <flow-ref name="unsubscribe" doc:name="Unsubscribe"/>
            </when>
            <otherwise>
                <http:static-resource-handler resourceBase="src/main/resources" defaultFile="WebClientSubUnsub.html" doc:name="HTTP Static Resource Handler"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="ws_addnews" doc:name="ws_addnews">
        <http:inbound-endpoint exchange-pattern="request-response"  doc:name="HTTP" host="localhost" path="ws_addnews" port="8081"/>
        <cxf:jaxws-service serviceClass="ws.AddNews" doc:name="SOAP"/>
        <flow-ref name="addnews" doc:name="Add News Flow"/>
        <set-payload value="SUCCESFULLY SENT TO THE SERVER AND ADDED TO THE DATABASE!!" doc:name="Set Payload"/>
    </flow>
    <flow name="addnews" doc:name="addnews">
        <mulexml:jaxb-xml-to-object-transformer jaxbContext-ref="myJaxb" doc:name="XML to JAXB Object"/>
        <foreach collection="payload.region" doc:name="For Each Region">
            <logger message="#[payload.name]" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Expression"><![CDATA[flowVars.region = payload.name;]]></expression-component>
            <foreach collection="payload.news" doc:name="For Each News in Region">
                <logger message="#[payload.title]" level="INFO" doc:name="Logger"/>
                <choice doc:name="Choice">
                    <when expression="payload.photoURL != null || payload.videoURL != null">
                        <expression-component doc:name="Expression"><![CDATA[import java.util.Calendar;

Calendar cal = Calendar.getInstance();
cal.set(Calendar.YEAR, payload.date.year);
cal.set(Calendar.MONTH, payload.date.month-1);
cal.set(Calendar.DATE, payload.date.day);
cal.set(Calendar.HOUR_OF_DAY,  payload.date.hour/100);
cal.set(Calendar.MINUTE,  payload.date.hour%100);
cal.set(Calendar.SECOND, 0);
cal.set(Calendar.MILLISECOND, 0);
java.sql.Timestamp jsqlTs = new java.sql.Timestamp(cal.getTime().getTime());

flowVars.date = jsqlTs;
flowVars.calNews = cal;
flowVars.title = payload.title;]]></expression-component>
                        <flow-ref name="nondigest" doc:name="Insert News / Non-Digest"/>

                        <choice doc:name="Choice">
                            <when expression="flowVars.calNews.get(Calendar.YEAR) == server.dateTime.year &amp;&amp; flowVars.calNews.get(Calendar.MONTH)+1 == server.dateTime.month &amp;&amp; flowVars.calNews.get(Calendar.DAY_OF_MONTH) == server.dateTime.dayOfMonth">
                                <twitter:update-status config-ref="Twitter"      doc:name="Twitter" status="#[flowVars.title]"/>
                            </when>
                            <otherwise>
                                <logger message="NOT DAILY" level="INFO" doc:name="Logger"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <logger message="N&#195;O TEM MEDIA" level="INFO" doc:name="Logger"/>
                    </otherwise>
                </choice>
            </foreach>
        </foreach>
    </flow>
    <sub-flow name="nondigest" doc:name="nondigest">
        <logger message="TEM MEDIA" level="INFO" doc:name="Logger"/>
        <expression-component doc:name="Expression"><![CDATA[flowVars.url = payload.url;
flowVars.title = payload.title;
]]></expression-component>
        <db:insert config-ref="Generic_Database_Configuration" doc:name="Insert News">
            <db:parameterized-query><![CDATA[INSERT INTO news VALUES(nextval('news_newsid_seq'), #[flowVars.date],#[payload.photoURL],#[flowVars.region],#[payload.text],#[payload.title],#[payload.url],#[payload.videoURL]);]]></db:parameterized-query>
        </db:insert>
        <db:select config-ref="Generic_Database_Configuration" doc:name="Select non-digest users">
            <db:parameterized-query><![CDATA[SELECT email FROM subscribers WHERE digest = 0 AND validated = 1 AND region = #[flowVars.region];]]></db:parameterized-query>
        </db:select>
        <foreach doc:name="For Each">
            <expression-component doc:name="Expression"><![CDATA[flowVars.email = payload.email;]]></expression-component>
            <set-payload value="Read at: #[flowVars.url]" doc:name="Set Payload"/>
            <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="systemsintegration14%40gmail.com" password="1234567892014" connector-ref="Gmail" to="#[flowVars.email]" from="systemsintegration14@gmail.com" subject="#[flowVars.title]" responseTimeout="10000" doc:name="Non-Digest"/>
        </foreach>
    </sub-flow>

    <flow name="insertauthors" doc:name="insertauthors">
        <foreach collection="payload.author" doc:name="For Each">
            <enricher doc:name="Message Enricher">
                <db:select config-ref="Generic_Database_Configuration" doc:name="Check existence in Database">
                    <db:parameterized-query><![CDATA[SELECT name FROM author WHERE name=#[payload]]]></db:parameterized-query>
                </db:select>
                <enrich source="#[payload.size() &gt; 0]" target="#[flowVars.exists]"/>
                <enrich source="#[payload]" target="#[flowVars.dbRecord]"/>
            </enricher>
            <choice doc:name="Choice">
                <when expression="#[flowVars['exists']==false]">
                    <db:insert config-ref="Generic_Database_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[INSERT INTO author VALUES (#[payload]);]]></db:parameterized-query>
                    </db:insert>
                </when>
                <otherwise>
                    <logger message="AUTHOR ALREADY EXITS" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <sub-flow name="invalid_xml" doc:name="invalid_xml">
        <logger message="Invalid XML" level="ERROR" doc:name="Logger"/>
    </sub-flow>
    <flow name="confirmation" doc:name="confirmation">
        <http:inbound-endpoint exchange-pattern="request-response"  doc:name="HTTP" host="localhost" path="confirmation" port="8081"/>
        <http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>
        <choice doc:name="Choice">
            <when expression="(payload.type == 's')">
                <db:update config-ref="Generic_Database_Configuration" doc:name="ConfirmSub">
                    <db:parameterized-query><![CDATA[UPDATE subscribers SET validated = 1 WHERE email = #[payload.code];]]></db:parameterized-query>
                </db:update>
                <set-payload value="YOU ARE NOW SUBSCRIBED" doc:name="Set Payload"/>
            </when>
            <when expression="(payload.type == 'u')">
                <db:delete config-ref="Generic_Database_Configuration" doc:name="ConfirmUnsub">
                    <db:parameterized-query><![CDATA[DELETE FROM subscribers WHERE email = #[payload.code];]]></db:parameterized-query>
                </db:delete>
                <set-payload value="YOU ARE NOW UNSUBSCRIBED" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <set-payload value="ERROR CONFIRMING SUB/UNSUB" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="ws_subscribe/unsubscribe_flow" doc:name="ws_subscribe/unsubscribe_flow">
        <http:inbound-endpoint exchange-pattern="request-response"   doc:name="HTTP" host="localhost" path="ws_sub_unsub" port="8081"/>
        <cxf:jaxws-service doc:name="SOAP" serviceClass="ws.SubscriptionUnsubscription"/>
        <choice doc:name="Choice">
            <when expression="method.name=='subscribe'">
                <expression-component doc:name="Subscribe"><![CDATA[flowVars.email=payload[0];
flowVars.region=payload[1];
flowVars.soap=payload[2];
flowVars.digest = payload[3];]]></expression-component>

                <flow-ref name="subscribe" doc:name="Subscribe SubFlow"/>
            </when>
            <when expression="method.name=='unsubscribe'">
                <expression-component doc:name="Unsubscribe"><![CDATA[flowVars.email=payload;
]]></expression-component>
                <flow-ref name="unsubscribe" doc:name="Unsubscribe SubFlow"/>
            </when>

            <otherwise>
                <set-payload value="ERROR CHOICE SUB/UNSUB" doc:name="Set Payload"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="subscribe" doc:name="subscribe">
        <enricher doc:name="Message Enricher">
            <db:select config-ref="Generic_Database_Configuration" doc:name="Check existence in Database">
                <db:parameterized-query><![CDATA[SELECT email FROM subscribers WHERE email=#[flowVars.email]]]></db:parameterized-query>

            </db:select>
            <enrich source="#[payload.size() &gt; 0]" target="#[flowVars.exists]"/>
            <enrich source="#[payload]" target="#[flowVars.dbRecord]"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[flowVars['exists']==false]">
                <db:insert config-ref="Generic_Database_Configuration" doc:name="Insert Subscription">
                    <db:parameterized-query><![CDATA[INSERT INTO subscribers VALUES(nextval('subscribers_id_seq'), #[flowVars.email],#[flowVars.region],#[flowVars.soap],#[flowVars.digest],0);]]></db:parameterized-query>
                </db:insert>
                <set-payload value="Confirm your subscription by clicking the link: http://localhost:8081/confirmation?code=#[flowVars.email]&amp;type=s" doc:name="Set Email Body"/>
                <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="systemsintegration14%40gmail.com" password="1234567892014" connector-ref="Gmail" to="#[flowVars.email]" from="systemsintegration14@gmail.com" subject="Confirm your subscription" responseTimeout="10000" doc:name="Confirmation Email"/>

                <set-payload value="AN EMAIL HAS BEEN SENT. YOU STILL NEED TO CONFIRM YOUR SUBSCRIPTION." doc:name="SUCCESS"/>
            </when>
            <otherwise>
                <set-payload value="EMAIL ALREADY EXISTS" doc:name="ERROR"/>
            </otherwise>
        </choice>

    </sub-flow>
    <sub-flow name="unsubscribe" doc:name="unsubscribe">
        <enricher doc:name="Message Enricher">
            <db:select config-ref="Generic_Database_Configuration" doc:name="Check existence in Database">
                <db:parameterized-query><![CDATA[SELECT email FROM subscribers WHERE email=#[flowVars.email]]]></db:parameterized-query>
            </db:select>
            <enrich source="#[payload.size() &gt; 0]" target="#[flowVars.exists]"/>
            <enrich source="#[payload]" target="#[flowVars.dbRecord]"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[flowVars['exists']==true]">

                <set-payload value="Confirm your unsubscription by clicking the link: http://localhost:8081/confirmation?code=#[flowVars.email]&amp;type=u" doc:name="Set Email Body"/>
                <smtp:outbound-endpoint host="smtp.gmail.com" port="587" user="systemsintegration14%40gmail.com" password="1234567892014" connector-ref="Gmail" to="#[flowVars.email]" from="systemsintegration14@gmail.com" subject="Confirm your unsubscription" responseTimeout="10000" doc:name="Confirmation Email"/>
                <set-payload value="AN EMAIL HAS BEEN SENT. YOU STILL NEED TO CONFIRM YOUR UNSUBSCRIPTION." doc:name="SUCCESS"/>
            </when>
            <otherwise>
                <set-payload value="EMAIL DOESN'T EXIST" doc:name="ERROR"/>
            </otherwise>
        </choice>
    </sub-flow>


</mule>
